from __future__ import annotations
from typing import Any
from inspect import signature
from functools import wraps

from ..elements import BaseElement
from .._internal.utils import create_props, to_title_case

param_descs = {
    "UNSAFE_class_name": "Set the CSS className for the element. Only use as a last resort. Use style props instead.",
    "UNSAFE_style": "Set the inline style for the element. Only use as a last resort when suitable style props aren't available.",
    "action": "The URL to submit the form data to.",
    "actions": "The action group or menus to render for all elements within the component, if supported.",
    "align": "Alignment of the menu relative to the trigger.",
    "align_content": "The distribution of space between and around items along the cross axis.",
    "align_items": "The alignment of children within their container.",
    "align_self": "Overrides the align_items property of a flex or grid container.",
    "alignment": "The alignment of the buttons within the button_group.",
    "allows_custom_value": "Whether the combo_box allows a non-item matching input value to be set.",
    "allows_non_contiguous_ranges": "When combined with unavailable_values, determines whether non-contiguous ranges, i.e. ranges containing unavailable dates, may be selected.",
    "alt": "Text description of the image.",
    "areas": "The named grid areas to use for the grid.",
    "aria_active_descendant": "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",
    "aria_auto_complete": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be presented if they are made.",
    "aria_controls": "The id of the element that the element controls.",
    "aria_described_by": "The id of the element that describes the current element.",
    "aria_describedby": "The id of the element that describes the element.",
    "aria_details": "The id of the element that provides additional information about the current element.",
    "aria_errormessage": "The id of the element that provides an error message for the current element.",
    "aria_expanded": "Whether the element is expanded.",
    "aria_has_popup": "Whether the element has a popup.",
    "aria_haspopup": "Whether the element has a popup.",
    "aria_label": "Defines a string value that labels the current element.",
    "aria_labelled_by": "The id of the element that labels the current element.",
    "aria_labelledby": "The id of the element that labels the element.",
    "aria_pressed": "Whether the element is pressed.",
    "auto_capitalize": "Controls whether inputted text is automatically capitalized and, if so, in what manner.",
    "auto_columns": "The size of auto-generated columns.",
    "auto_complete": "Describes the type of autocomplete functionality the input should provide",
    "auto_flow": "The flow direction for auto-generated grid items.",
    "auto_focus": "Whether the element should receive focus on render.",
    "auto_rows": "The size of auto-generated rows.",
    "back_columns": "The columns to pin to the back of the table. These will not be movable by the user.",
    "background_color": "The background color of the element.",
    "border_bottom_color": "The color of the border for the bottom side of the element.",
    "border_bottom_end_radius": "The radius of the border for the bottom end corner of the element.",
    "border_bottom_start_radius": "The radius of the border for the bottom start corner of the element.",
    "border_bottom_width": "The width of the border for the bottom side of the element.",
    "border_color": "The color of the border for all four sides of the element.",
    "border_end_color": "The color of the border for the end side of the element, depending on layout direction.",
    "border_end_width": "The width of the border for the end side of the element, depending on layout direction.",
    "border_radius": "The radius of the border for all four corners of the element.",
    "border_start_color": "The color of the border for the start side of the element, depending on layout direction.",
    "border_start_width": "The width of the border for the start side of the element, depending on layout direction.",
    "border_top_color": "The color of the border for the top side of the element.",
    "border_top_end_radius": "The radius of the border for the top end corner of the element.",
    "border_top_start_radius": "The radius of the border for the top start corner of the element.",
    "border_top_width": "The width of the border for the top side of the element.",
    "border_width": "The width of the border for all four sides of the element.",
    "border_x_color": "The color of the border for the left and right sides of the element.",
    "border_x_width": "The width of the border for the left and right sides of the element.",
    "border_y_color": "The color of the border for the top and bottom sides of the element.",
    "border_y_width": "The width of the border for the top and bottom sides of the element.",
    "bottom": "The distance from the bottom of the containing element.",
    "button_label_behaviour": "Defines when the text within the buttons should be hidden and only the icon should be shown.",
    "close_on_select": "Whether the Menu closes when a selection is made.",
    "color": "The color of the text.",
    "column_gap": "The gap between columns.",
    "column_groups": "Columns to group together by default. The groups will be shown in the table header. Group names must be unique within the column and group names. Groups may be nested by providing the group name as a child of another group.",
    "columns": "The column sizes for the grid.",
    "container_padding": "The placement padding that should be applied between the element and its surrounding container.",
    "context_header_menu": "The context menu items to show when a column header is right clicked. May contain action items or submenu items. May also be a function that receives the column header data and returns the context menu items or None.",
    "context_menu": "The context menu items to show when a cell is right clicked. May contain action items or submenu items. May also be a function that receives the cell data and returns the context menu items or None.",
    "contextual_help": "A contextual_help element to place next to the label.",
    "cross_offset": "The additional offset applied along the cross axis between the element and its anchor element.",
    "decrement_aria_label": 'The aria label for the decrement stepper button. If not provided, the default is "Decrement"',
    "default_input_value": "The default value of the search input (uncontrolled).",
    "default_open": "Whether the overlay is open by default (uncontrolled).",
    "default_selected": "Whether the element should be selected (uncontrolled).",
    "default_selected_key": "The initial selected key in the collection (uncontrolled).",
    "default_selected_keys": "The initial selected keys in the collection (uncontrolled).",
    "default_value": "The default value (uncontrolled).",
    "density": "Sets the amount of space between buttons.",
    "description": "A description for the field. Provides a hint such as specific requirements for what to choose.",
    "description_column": "The column of values to display as descriptions.",
    "direction": "Where the Menu opens relative to its trigger.",
    "disabled_keys": "The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",
    "disallow_empty_selection": "Whether the collection allows empty selection.",
    "element": "Element to render as the dashboard.      The element should render a layout that contains 1 root column or row.",
    "element_type": "The type of element to render.",
    "enc_type": "The enctype attribute specifies how the form-data should be encoded when submitting it to the server.",
    "end": "The distance from the end of the containing element, depending on layout direction.",
    "end_name": "The name of the end date input element, used when submitting an HTML form.",
    "error_message": "An error message for the field.",
    "exclude_from_tab_order": "Whether the element should be excluded from the tab order. If true, the element will not be focusable via the keyboard by tabbing.",
    "fill_offset": "The offset of the filled area from the start of the slider.",
    "flex": "When used in a flex layout, specifies how the element will grow or shrink to fit the space available.",
    "flex_basis": "When used in a flex layout, specifies the initial main size of the element.",
    "flex_grow": "When used in a flex layout, specifies how the element will grow to fit the space available.",
    "flex_shrink": "When used in a flex layout, specifies how the element will shrink to fit the space available.",
    "form_value": "Whether the text or key of the selected item is submitted as part of an HTML form. When allows_custom_value is true, this option does not apply and the text is always submitted.",
    "front_columns": "The columns to pin to the front of the table. These will not be movable by the user.",
    "frozen_columns": "The columns to freeze by default at the front of the table. These will always be visible regardless of horizontal scrolling. The user may unfreeze columns or freeze additional columns.",
    "gap": "The space to display between both rows and columns of children.",
    "granularity": 'Determines the smallest unit that is displayed in the date picker. By default, this is `"DAY"` for `LocalDate`, and `"SECOND"` otherwise.',
    "grid_area": "When used in a grid layout specifies, specifies the named grid area that the element should be placed in within the grid.",
    "grid_column": "When used in a grid layout, specifies the column the element should be placed in within the grid.",
    "grid_column_end": "When used in a grid layout, specifies the ending column to span within the grid.",
    "grid_column_start": "When used in a grid layout, specifies the starting column to span within the grid.",
    "grid_row": "When used in a grid layout, specifies the row the element should be placed in within the grid.",
    "grid_row_end": "When used in a grid layout, specifies the ending row to span within the grid.",
    "grid_row_start": "When used in a grid layout, specifies the starting row to span within the grid.",
    "height": "The height of the element.",
    "hidden_columns": "The columns to hide by default. Users may show the columns by expanding them.",
    "hide_stepper": "Whether to hide the increment and decrement stepper buttons",
    "hide_time_zone": "Whether to hide the time zone abbreviation.",
    "hour_cycle": "Whether to display the time in 12 or 24 hour format. By default, this is determined by the user's locale.",
    "href": "A URL to link to when the button is pressed.",
    "icon": "An icon to display at the start of the input",
    "icon_column": "The column of values to map to icons.",
    "id": "The unique identifier of the element.",
    "increment_aria_label": 'The aria label for the increment stepper button. If not provided, the default is "Increment"',
    "input_mode": "Hints at the tpye of data that might be entered by the user while editing the element or its contents",
    "input_value": "The value of the search input (controlled).",
    "is_disabled": "Whether the button is disabled.",
    "is_emphasized": "This prop Sets the emphasized style which provides visual prominence.",
    "is_filled": "Whether the slider should be filled between the start of the slider and the current value.",
    "is_hidden": "Whether the element is hidden.",
    "is_indeterminate": "Indeterminism is presentational only. The indeterminate visual representation remains regardless of user interaction.",
    "is_invalid": "Whether the element is invalid.",
    "is_justified": "Whether the action buttons should be justified in their container.",
    "is_loading": "Whether the picker is in a loading state.",
    "is_open": "Whether the overlay is open by default (controlled).",
    "is_pending": "Whether to disable events immediately and display a loading spinner after a 1 second delay.",
    "is_quiet": "Whether the input should be displayed with a quiet style",
    "is_read_only": "Whether the input can be selected but not changed by the user.",
    "is_required": "Whether the element is required before form submission.",
    "is_selected": "Whether the element should be selected (controlled).",
    "is_wheel_disabled": "Whether the input should change with scroll",
    "justify_content": "The distribution of space around items along the main axis.",
    "justify_items": "The defailt justify_self for all items in the grid.",
    "justify_self": "Specifies how the element is justified inside a flex or grid container.",
    "key": "The unique key of the tab item. Defaults to title.",
    "key_column": "The column of values to use as item keys. Defaults to the first column.",
    "keyboard_activation": "Whether tabs are activated automatically on focus or manually.",
    "label": "The content to display as the label.",
    "label_align": "The label's horizontal alignment relative to the element it is labeling.",
    "label_column": "The column of values to display as primary text. Defaults to the key_column value.",
    "label_position": "The label's overall position relative to the element it is labeling.",
    "left": "The distance from the left of the containing element.",
    "level": "Sets heading level, h1 through h6. Defaults to 3.",
    "loading_state": "The current loading state of the ComboBox. Determines whether or not the progress circle should be shown.",
    "margin": "The margin for all four sides of the element.",
    "margin_bottom": "The margin for the bottom side of the element.",
    "margin_end": "The margin for the logical end side of the element, depending on layout direction.",
    "margin_start": "The margin for the logical start side of the element, depending on layout direction.",
    "margin_top": "The margin for the top side of the element.",
    "margin_x": "The margin for the left and right sides of the element.",
    "margin_y": "The margin for the top and bottom sides of the element.",
    "max_height": "The maximum height of the element.",
    "max_length": "The maximum number of characters the input can accept",
    "max_value": "The maximum allowed date that a user may select.",
    "max_visible_months": "The maximum number of months to display at once in the calendar popover, if screen space permits.",
    "max_width": "The maximum width of the element.",
    "menu_trigger": "The interaction required to display the combo box menu.",
    "menu_width": "Width of the menu. By default, matches width of the combobox. Note that the minimum width of the dropdown is always equal to the combobox's width.",
    "method": "The HTTP method of the form.",
    "min_height": "The minimum height of the element.",
    "min_length": "The minimum number of characters the input can accept",
    "min_value": "The minimum allowed date that a user may select.",
    "min_width": "The minimum width of the element.",
    "name": "The name of the input element, used when submitting an HTML form.",
    "necessity_indicator": "Whether the required state should be shown as an icon or text.",
    "object_fit": "How the image should be resized to fit its container.",
    "offset": "The additional offset applied along the main axis between the element and its anchor element.",
    "on_action": "Invoked when an action is taken on a child. Especially useful when selectionMode is none. The sole argument key is the key for the item.",
    "on_blur": "Handler that is called when the element loses focus.",
    "on_cell_double_press": "The callback function to run when a cell is double clicked. The callback is invoked with the cell data.",
    "on_cell_press": "The callback function to run when a cell is clicked. The callback is invoked with the cell data.",
    "on_change": "Function called when the input value changes",
    "on_change_end": "Function called when the slider stops moving",
    "on_column_double_press": "The callback function to run when a column is double clicked. The callback is invoked with the column name.",
    "on_column_press": "The callback function to run when a column is clicked. The callback is invoked with the column name.",
    "on_error": "A callback function to run when the image fails to load.",
    "on_focus": "Handler that is called when the element receives focus.",
    "on_focus_change": "Function called when the focus state changes.",
    "on_input_change": "Handler that is called when the combo box input value changes.",
    "on_invalid": "The function to call when the form is invalid.",
    "on_key_down": "Function called when a key is pressed.",
    "on_key_up": "Function called when a key is released.",
    "on_load": "A callback function to run when the image has loaded.",
    "on_open_change": "Handler that is called when the overlay's open state changes.",
    "on_press": "Function called when the button is pressed.",
    "on_press_change": "Function called when the pressed state changes.",
    "on_press_end": "Function called when a press interaction ends, either over the target or when the pointer leaves the target.",
    "on_press_start": "Function called when the button is pressed.",
    "on_press_up": "Function called when the button is released.",
    "on_reset": "The function to call when the form is reset.",
    "on_row_double_press": "The callback function to run when a row is double clicked. The callback is invoked with the visible row data provided in a dictionary where the column names are the keys.",
    "on_row_press": "The callback function to run when a row is clicked. The callback is invoked with the visible row data provided in a dictionary where the column names are the keys.",
    "on_selection_change": "Handler that is called when the selection changes.",
    "on_submit": "The function to call when the form is submitted.",
    "order": "The layout order for the element within a flex or grid container.",
    "orientation": "The axis the ActionGroup should align with.",
    "overflow": "Specifies what to do when the elment's content is too long to fit its size.",
    "overflow_mode": "The behavior of the ActionGroup when the buttons do not fit in the available space.",
    "padding": "The padding for all four sides of the element.",
    "padding_bottom": "The padding for the bottom side of the element.",
    "padding_end": "The padding for the logical end side of the element, depending on layout direction.",
    "padding_start": "The padding for the logical start side of the element, depending on layout direction.",
    "padding_top": "The padding for the top side of the element.",
    "padding_x": "The padding for the left and right sides of the element.",
    "padding_y": "The padding for the top and bottom sides of the element.",
    "page_behavior": "Controls the behavior of paging. Pagination either works by advancing the visible page by visibleDuration (default) or one unit of visibleDuration.",
    "pattern": "A regular expression that the input's value must match",
    "placeholder": "Placeholder text for the input.",
    "placeholder_value": "A placeholder date that influences the format of the placeholder shown when no value is selected. Defaults to today at midnight in the user's timezone.",
    "placement": "The placement of the popover relative to the action button.",
    "position": "The position of the element.",
    "quick_filters": "The quick filters to apply to the table. Dictionary of column name to filter value.",
    "rel": "The relationship between the current document and the linked URL.",
    "render_empty_state": "Sets what the `list_view` should render when there is no content to display.",
    "reverse": "Whether to reverse the table rows. Applied after any sorts.",
    "right": "The distance from the right of the containing element.",
    "row_gap": "The space to display between rows of children.",
    "rows": "The row sizes for the grid.",
    "selected_key": "The currently selected key in the collection (controlled).",
    "selected_keys": "The currently selected keys in the collection (controlled).",
    "selection_mode": "The type of selection that is allowed in the collection.",
    "should_flip": "Whether the element should flip its orientation when there is insufficient room for it to render completely.",
    "should_focus_wrap": "Whether keyboard navigation is circular.",
    "should_force_leading_zeros": "Whether to always show leading zeros in the month, day, and hour fields. By default, this is determined by the user's locale.",
    "show_error_icon": "Whether an error icon is rendered.",
    "show_format_help_text": "Whether to show the localized date format as help text below the field.",
    "show_quick_filters": "Whether to show the quick filter bar by default.",
    "show_search": "Whether to show the search bar by default.",
    "show_value_label": "Whether the value label should be displayed. True by default if the label is provided.",
    "size": "The size of the icon (changes based on scale).",
    "slot": "A slot to place the icon in.",
    "src": "The URL of the image.",
    "start": "The distance from the start of the containing element.",
    "start_name": "The name of the start date input element, used when submitting an HTML form.",
    "static_color": "The static color style to apply. Useful when the button appears over a color background.",
    "step": "The step value for the slider.",
    "style": "The background style of the button.",
    "summary_icon": "The icon displayed in the dropdown menu button when a selectable ActionGroup is collapsed.",
    "table": "The table to use as the source of items.",
    "target": "The target window or tab to open the linked URL in.",
    "text_value": "A string representation of the item's contents, used for features like typeahead.",
    "title": "Rendered contents of the item if `children` contains child items.",
    "title_column": "Only valid if table is of type PartitionedTable. The column of values to display as section names. Should be the same for all values in the constituent Table. If not specified, the section titles will be created from the key_columns of the PartitionedTable.",
    "top": "The distance from the top of the containing element.",
    "track_gradient": "The background of the track, specified as the stops for a CSS background: linear-gradient(to right/left, ...trackGradient).",
    "trigger": "How the menu is triggered.",
    "type": 'The type of button to render. (default: "button")',
    "validation_behavior": "Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.",
    "validation_errors": "The validation errors for the form.",
    "validation_state": 'Whether the input should display its "valid" or "invalid" visual styling.',
    "value": "The current value (controlled).",
    "variant": "The visual style of the button.",
    "width": "The width of the element.",
    "wrap": "Whether children should wrap when they exceed the panel's width.",
    "z_index": "The stack order of the element.",
}


def make_element(
    description: str,
    override_name: str | None = None,
    override_param_descs: dict[str, str] = {},
    override_return: str | None = None,
):
    """
    A decorator creator thats turns a function (that returns `global() of its props`) into a component.

    Args:
        description: The description of the component.
        override_name: The name of the component that will override the default (the function name in camel case).
        override_param_descs: A dictionary of prop descriptions that will override the default ones.
        override_return: The string that will override the default ("The rendered {name} component.") return value.
    """

    def decorator(f: Any):
        nonlocal override_name
        nonlocal override_return

        sig = signature(f)

        # Run here so it's run once
        if override_name is None:
            override_name = to_title_case(f.__name__)
        if override_return is None:
            override_return = f"The rendered {override_name} component."

        @wraps(f)
        def wrapper(*args, key: str | None = None, **kwargs):
            children, props = create_props(f(*args, **kwargs))
            props["key"] = key
            return BaseElement(
                f"deephaven.ui.components.{override_name}", *children, **props
            )

        wrapper.__doc__ = f"{description}\n\nArgs:\n"
        for param_name in (param.name for param in sig.parameters.values()):
            if param_name in override_param_descs:
                wrapper.__doc__ += (
                    f"    {param_name}: {override_param_descs[param_name]}\n"
                )
            elif param_name in param_descs:
                wrapper.__doc__ += f"    {param_name}: {param_descs[param_name]}\n"
            else:
                raise ValueError(f'Docs of parameter "{param_name}" not specified.')
        wrapper.__doc__ += f"    key: A unique key for the element\n"
        wrapper.__doc__ += f"\nReturns:\n    {override_return}\n"

        return wrapper

    return decorator
